{"version":3,"sources":["components/Alert.js","components/About.js","components/Contact.js","components/Navbar.js","components/TextForm.js","App.js","index.js"],"names":["Alert","props","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","About","myStyle","color","backgroundColor","style","id","Contact","mode","Navbar","to","title","aboutText","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","character","length","split","setStyle","heading","border","rows","value","onChange","event","target","console","log","newtext","showAlert","newText","replace","txt","substr","join","copyText","document","getElementById","select","navigator","clipboard","writeText","data","Blob","url","window","URL","createObjectURL","href","textDecoration","download","defaultProps","App","setMode","setAlert","message","setTimeout","body","exact","path","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9d545dba.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize=(word)=>{\r\n         const lower=word.toLowerCase();\r\n         return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className=\"container my-2\">\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n             <strong>{capitalize(props.alert.type)} ! </strong> {props.alert.msg}\r\n             <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\n\r\nexport default function About(props) {\r\n    const myStyle={\r\n         color:\"black\",\r\n         backgroundColor:\"white\"\r\n     }\r\n     \r\n    return (\r\n        <div>\r\n            <div className=\"container my-5\" style={myStyle}>\r\n                <h1>About Us</h1>\r\n                <div className=\"accordion\" id=\"accordionExample\">\r\n                    <div className=\"accordion-item\"  style={myStyle}>\r\n                        <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                            <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                                Accordion Item #1\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\">\r\n                                <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\"  style={myStyle}>\r\n                        <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                            <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                                Accordion Item #2\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\">\r\n                                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\"  style={myStyle}>\r\n                        <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                            <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                                Accordion Item #3\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\">\r\n                                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Contact(props) {\r\n    return (\r\n        <div className={`container my-3 text-${props.mode==='dark'?'light':'dark'}`}>\r\n            <h1>Connect With Us</h1>\r\n            <p>Email : prakashjdh2019@gmail.com</p>\r\n            <p>Phone : +91 6376154794 </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport {\r\n    Link\r\n  } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n    \r\n    return (\r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link active\" to=\"/about\">{props.aboutText}</Link>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/contact\">Contact</Link>\r\n                            </li>\r\n                        </ul>\r\n                        <div className={`form-check form-switch text-${props.mode==='dark'?'light':'dark'}`}>\r\n                          <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                          <label className=\"form-check-label \" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n       \r\n    )\r\n    \r\n}\r\nNavbar.propTypes={\r\n    title:PropTypes.string.isRequired,\r\n    aboutText:PropTypes.string\r\n}\r\nNavbar.defaultProps={\r\n    title:\"Prakash Dhayal\",\r\n    aboutText:\"About Us\"\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState(\"\")\r\n    let character=text.length>0?text.length:0;\r\n    let word=(character===0 || text[character-1]===\" \")?(text.split(\" \").length-1):text.split(\" \").length;\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n    // convert uppercase \r\n    const handleUpClick = () => {\r\n        console.log(\"Convert to uppercase\")\r\n        let newtext = text.toUpperCase();\r\n        setText(newtext);\r\n        props.showAlert(\"Coverted in UpperCase!\",\"success\")\r\n    }\r\n    // convert lowercase \r\n    const handleLoClick = () => {\r\n        console.log(\"Convert to lowercase\")\r\n        let newtext = text.toLowerCase();\r\n        setText(newtext);\r\n        props.showAlert(\"Coverted in LowerCase!\",\"success\")\r\n    }\r\n\r\n    // clear whole text \r\n    const handleClearText = () => {\r\n        setText(\"\");\r\n        props.showAlert(\"Text Cleared!\",\"success\")\r\n    }\r\n\r\n    // copy text on clipboard\r\n    const handleCopyText = () => {\r\n        var copyText = document.getElementById('myBox');\r\n        copyText.select();\r\n        navigator.clipboard.writeText(copyText.value);\r\n        props.showAlert(\"Text Copied to Clipboard!\",\"success\")\r\n    }\r\n\r\n    // Download Text\r\n    const handleDText = () => {\r\n        var data = new Blob([text], { type: 'text/plain' });\r\n        var url = window.URL.createObjectURL(data);\r\n        document.getElementById('download_link').href = url;\r\n    }\r\n    // Remove extra spaces\r\n    const handleExtraSpace = () => {\r\n        let newText=text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Extra Spaces Removed!\",\"success\")\r\n    }\r\n\r\n    // convert in Capitalized Case \r\n    const handleCCClick = () => {\r\n        let newText = text.replace(\r\n            /\\w\\S*/g,\r\n            function (txt) {\r\n                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\r\n            }\r\n        );\r\n        setText(newText);\r\n        props.showAlert(\"Text Capitalized!\",\"success\")\r\n    }\r\n    const setStyle={\r\n        color:`${props.mode==='dark'?'white':'black'}`\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h3 className=\"my-3\" style={setStyle}><b>{props.heading}</b></h3>\r\n            <div className=\"mb-3\">\r\n                <textarea style={{border:\"2px solid blue\",color:`${props.mode==='dark'?'black':'white'}`,\r\n                backgroundColor:`${props.mode==='dark'?'white':'black'}`}}className=\"form-control\" id=\"myBox\" rows=\"8\" value={text} onChange={handleOnChange}></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>UPPERCASE</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>lowercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleCCClick}>Capitalized Case</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpace}>Remove Extra Spaces</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleCopyText}>Copy to Clipboard</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleDText}>\r\n                <a id=\"download_link\" style={{textDecoration:\"none\",color:\"white\"}} download=\"my_exported_file.txt\" href=\"/\" >Download as Text File</a>\r\n            </button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleClearText}>Clear</button>\r\n            <div className=\"my-3\" style={setStyle}>\r\n                <h5>Character Count: {character} | Word Count: {word} |  {(0.008) * (word)} Minutes Read</h5>\r\n            </div>\r\n            <div style={setStyle}>\r\n                <h4>Preview:</h4>\r\n                <p>{text.length>0?text:\"Enter something in the textbox above to preview it here \"}</p>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React,{useState} from 'react'\nimport Alert from './components/Alert'\nimport About from './components/About'\nimport Contact from './components/Contact'\nimport Navbar from './components/Navbar'\nimport TextForm from './components/TextForm'\n\nimport {\n  BrowserRouter as Router,\n  Switch ,\n  Route\n} from \"react-router-dom\";\n\nexport default function App() {\n  const [mode, setMode] = useState('light')\n  const [alert, setAlert] = useState(null)\n  const toggleMode=()=>{\n   if(mode==='light')\n   {\n     setMode('dark');\n     document.body.style.backgroundColor=\"black\";\n     showAlert(\"Dark Mode has been Enabled! \",\"success\")\n    //  change title \n     document.title=\"TextUtils - DarkMode\"\n   }\n   else\n   {\n    setMode('light');\n     document.body.style.backgroundColor=\"white\";\n     showAlert(\"Light Mode has been Enabled! \",\"success\")\n     document.title=\"TextUtils - LightMode\"\n   }\n  }\n  const showAlert=(message,type)=>{\n      setAlert({\n        msg:message,\n        type:type\n      })\n      // automatic remove the alert after 2 second \n      setTimeout(()=>{\n         setAlert(null);\n      },2000)\n  }\n\n  return (\n    <div>\n      <Router>\n        <Navbar title=\"TextUtils\" aboutText=\"About\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <Switch >\n          <Route exact path=\"/about\">\n            <About mode={mode} />\n          </Route>\n          <Route exact path=\"/\">\n            <TextForm heading=\"Enter the Text to Analyze Below \" mode={mode} showAlert={showAlert} />\n          </Route>\n          <Route exact path=\"/contact\">\n            <Contact mode={mode}/>\n          </Route>\n        </Switch>\n      </Router>\n      \n    </div>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}